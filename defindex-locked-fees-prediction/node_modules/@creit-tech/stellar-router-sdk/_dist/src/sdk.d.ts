import { Address, Contract, type Operation, xdr } from "@stellar/stellar-sdk";
import { type InvocationV0, type InvocationV1, type StellarRouterParams } from "./types.js";
export declare class StellarRouterSdk {
  params?: StellarRouterParams;
  public get simAccount(): string;
  public get router(): Contract;
  constructor(params?: StellarRouterParams);
  /**
   * This method generates the InvokeHostFunction Operation that you will be able to use within your transactions
   * @param caller - The address that is calling the contract, this account must authorize the transaction even if none of the invocations require authorization.
   * @param invocations - All the invocations the proxy will execute
   */ exec(caller: Contract | Address | string, invocations: (InvocationV1 | InvocationV0)[]): xdr.Operation<Operation.InvokeHostFunction>;
  simResult<T>(invocations: (InvocationV1 | InvocationV0)[], opts?: {
    caller?: string;
    source?: string;
  }): Promise<T>;
}
//# sourceMappingURL=sdk.d.ts.map